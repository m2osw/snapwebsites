# Fail2Ban jail configuration files
#
# These jails come in addition the default jails offered by fail2ban.
#


# The fact that a computer attempts to connect to use via port 23 is a
# very clear signal that we do not want that IP to ever access us in
# any other way either.
#
# IMPORTANT NOTE:
# Uncomment if you want to use this one. Because of the IoT incredible
# extend, at this point we turn it off and just block the ports (23, 123
# and 2323) directly in the firewall before it even gets sent to the
# iptables.log file.
#
#[snap-telnet]
#enabled  = true
#filter   = snap-telnet-filter
#action   = snap-firewall-action[scheme=all,period=forever,reason=fail2ban: telnet]
#logpath  = /var/log/iptables/iptables.log
#maxretry = 1
#findtime = 86400

# The snap-iptables scans the /var/log/iptables/iptables.log which is a set of
# kernel log as coming from LOG rules in the iptables firewall.
#
# If the same IP address tried to access our services for 5 times or
# more and got blocked within the last 1h, block the IP for a year.
#
[snap-iptables]
enabled  = true
filter   = snap-iptables-filter
action   = snap-firewall-action[scheme=all,period=year,reason=fail2ban: iptables]
logpath  = /var/log/iptables/iptables.log
maxretry = 5
findtime = 3600

# The iptables saves many entries in the iptables logs in case of very fast
# DNS requests.
#
[snap-named-fast-requests]
enabled  = true
filter   = snap-named-fast-requests-filter
action   = snap-firewall-action[scheme=all,period=year,reason=fail2ban: DNS DDoS]
logpath  = /var/log/iptables/iptables.log
maxretry = 5
findtime = 5

# Apache replied with a 400, we just ban those immediately
# (browsers never generate such, really!)
#
[snap-apache-badrequest]
enabled  = true
filter   = snap-apache-badrequest-filter
action   = snap-firewall-action[scheme=all,period=year,reason=fail2ban: apache bad request]
logpath  = %(apache_access_log)s
maxretry = 1
findtime = 86400

# By default Apache2 server refuses proxying, but it will save such requests
# in its log files. We detect those and block any such IP address because it
# is never possible, with Snap, to proxy an HTTP request in this way.
#
[snap-apache-proxy]
enabled  = true
filter   = snap-apache-proxy-filter
action   = snap-firewall-action[scheme=all,period=year,reason=fail2ban: apache proxy]
logpath  = %(apache_access_log)s
maxretry = 1
findtime = 86400

# If a user gets too many timeouts (35) then block him. Untfortunately we
# cannot make that count too small because this happens if legitimate users
# who would lose their Internet connection and as a result you can end up
# with many 408.
#
# TODO: At some point we'll need a fix for this one. Right now, Apache2 emits
#       many 408 for all sorts of reasons, not just Slowloris hits. It could
#       be that by tweaking the parameters we'd get the correct results, but
#       right now we do not have a way to verify that. There is a page which
#       says to use reqtimeout (done!) and use the modsecurity module. The
#       timings used in modsecurity is 5 x 408 within 1 minute instead of
#       our current setup of 35 within 1 hour (that means a whooping total of
#       300 x 408 in 1 hour, which seems really large to me.)
#
#       From: https://www.acunetix.com/blog/articles/slow-http-dos-attacks-mitigate-apache-http-server/
#
#       # reqtimeout setup
#       <IfModule mod_reqtimeout.c>
#         RequestReadTimeout header=20-40,MinRate=500 body=20,MinRate=500
#       </IfModule>
#
#       # mod QOS, we are not using, plus the numbers seem off for a small
#       # DigitalOcean computer (i.e. too many connections at once)
#       <IfModule mod_qos.c>
#          # handle connections from up to 100000 different IPs
#          QS_ClientEntries 100000
#          # allow only 50 connections per IP
#          QS_SrvMaxConnPerIP 50
#          # limit maximum number of active TCP connections limited to 256
#          MaxClients 256
#          # disables keep-alive when 180 (70%) TCP connections are occupied
#          QS_SrvMaxConnClose 180
#          # minimum request/response speed (deny slow clients blocking the server, keeping connections open without requesting anything
#          QS_SrvMinDataRate 150 1200
#       </IfModule>
#
#       # mod_secutiry
#       # this counts the number of 408 and if it reaches 6 or more within
#       # 60 seconds, then view it as a slowloris (the "expirevar" timeout
#       # is probably reset after 60 sec. so the duration could be longer,
#       # so you need to get 6+ ecah within 1 min. of each other
#       SecRule RESPONSE_STATUS "@streq 408" "phase:5,t:none,nolog,pass,
#       setvar:ip.slow_dos_counter=+1, expirevar:ip.slow_dos_counter=60, id:'1234123456'"
#       SecRule IP:SLOW_DOS_COUNTER "@gt 5" "phase:1,t:none,log,drop,
#       msg:'Client Connection Dropped due to high number of slow DoS alerts', id:'1234123457'"
#
#[snap-apache-timeout]
#enabled  = true
#filter   = snap-apache-timeout-filter
#action   = snap-firewall-action[scheme=all,period=year,reason=fail2ban: apache timeout]
#logpath  = %(apache_access_log)s
## This can happen to regular users if they lose their Internet connection
## and they could have quite a few connections (especially with Chrome)
#maxretry = 35
#findtime = 3600

# Block various paths which are blocked by snap.cgi, but that does not work
# when accessing the website adnd Apache2 decides to emit a 301.
#
[snap-apache-unwanted]
enabled  = true
filter   = snap-apache-unwanted-filter
action   = snap-firewall-action[scheme=all,period=year,reason=fail2ban: apache unwanted]
logpath  = %(apache_access_log)s
maxretry = 1
findtime = 86400

# vim: syntax=dosini
